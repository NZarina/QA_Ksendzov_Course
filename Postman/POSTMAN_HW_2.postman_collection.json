{
	"info": {
		"_postman_id": "dd01bd03-57d7-45f9-99ee-77f87adeabc1",
		"name": "POSTMAN_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20981289"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"console.log(\"response data: \", responseData)\r",
							"\r",
							"// 7. Спарсить request. \r",
							"let requestData = request.data;\r",
							"console.log(\"request data: \", requestData)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name из request (name вбить руками.)\r",
							"let requestName = requestData.name;\r",
							"pm.test(\"checking the name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(\"Rina\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age из request (age вбить руками.)\r",
							"let requestAge = requestData.age;\r",
							"pm.test(\"checking the age\", function () {\r",
							"    pm.expect(responseData.age).to.eql(\"45\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary из request (salary вбить руками.)\r",
							"let requestSalary = +requestData.salary;\r",
							"pm.test(\"checking the salary\", function () {\r",
							"    pm.expect(responseData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"checking the name from request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestName);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"checking the age from request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"pm.test(\"checking the salary from request\", function () {\r",
							"    pm.expect(responseData.salary).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family info\", responseData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let responseSalary_1_5 = requestSalary * 4;\r",
							"pm.test(\"checking u_salary_1_5_year from request\", function () {\r",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(responseSalary_1_5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "45",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Rina",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responseData = JSON.parse(responseBody);\r",
							"// можно ли так: let responseData = pm.response.json();\r",
							"console.log(\"response data: \", responseData)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"console.log(\"request data: \", requestData)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"let requestName = requestData.name\r",
							"pm.test(\"checking the name from request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestName);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let requestAge = requestData.age\r",
							"pm.test(\"checking the age from request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"let requestSalary = +requestData.salary\r",
							"pm.test(\"checking the salary from request\", function () {\r",
							"    pm.expect(responseData.salary).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"family info:\", responseData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog name is available\", function () {\r",
							"    pm.expect(responseData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog age available\", function () {\r",
							"    pm.expect(responseData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog name is Luky\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog age 4\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Zarina&age=33&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Zarina"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let responseData = JSON.parse(responseBody);\r",
							"console.log(\"response contains the following: \", responseData)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"console.log(\"request contains the following: \", requestData)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"let requestName = requestData.name;\r",
							"pm.test(\"checking the name from request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestName);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let requestAge = +requestData.age;\r",
							"pm.test(\"checking the age from request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"request salary: \", requestData.salary) \r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"response salary: \", responseData.salary) \r",
							" \r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"response salary element 0: \", responseData.salary[0]) \r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"response salary element 1: \", responseData.salary[1]) \r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"response salary element 2: \", responseData.salary[2]) \r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let requestSalary = +requestData.salary; \r",
							"pm.test(\"checking the response salary element 0\", function () {\r",
							"    pm.expect(responseData.salary[0]).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"checking the response salary element 1\", function () {\r",
							"    pm.expect(+responseData.salary[1]).to.eql(requestSalary * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"checking the response salary element 2\", function () {\r",
							"    pm.expect(+responseData.salary[2]).to.eql(requestSalary * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"let name = responseData.name\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"let age = responseData.age\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"let salary = responseData.salary \r",
							"pm.environment.set(\"salary\", salary);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < salary.length; i++) {\r",
							"  console.log(\"salary/loops\", salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Zarina&age=33&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Zarina"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"\r",
							"// 2. Вставить параметр age из окружения в request\r",
							"\r",
							"// 3. Вставить параметр name из окружения в request\r",
							"\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"console.log('response contains:', responseData)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requestData = request.data\r",
							"console.log('request contains:', requestData)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary available\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months available\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months available\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year available\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years available\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person available\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let requestStartSalary = +requestData.salary;\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(requestStartSalary);\r",
							"});\r",
							"console.log(requestStartSalary)\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let requestSalary6Months = +requestData.salary*2;\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(requestSalary6Months);\r",
							"});\r",
							"console.log(requestSalary6Months)\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let requestSalary12Months = +requestData.salary*2.7;\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(requestSalary12Months);\r",
							"});\r",
							"console.log(requestSalary12Months)\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let requestSalary1_5year = +requestData.salary*3.3;\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_1.5_year']).to.eql(requestSalary1_5year);\r",
							"});\r",
							"console.log(requestSalary1_5year)\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let requestSalary3_5year = +requestData.salary*3.8;\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_3.5_years']).to.eql(requestSalary3_5year);\r",
							"});\r",
							"console.log(requestSalary3_5year)\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let requestSalary = +requestData.salary;\r",
							"pm.test(\"checking u_name element 1\", function () {\r",
							"    pm.expect(responseData.person.u_name[1]).to.eql(requestSalary);\r",
							"});\r",
							" \r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let requestAge = +requestData.age\r",
							"pm.test(\"checking u_age\", function () {\r",
							"    pm.expect(responseData.person.u_age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let requestSalary5Years = +requestData.salary*4.2;\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(requestSalary5Years);\r",
							"});\r",
							"console.log(requestSalary5Years)\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}